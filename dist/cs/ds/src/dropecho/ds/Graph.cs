// Generated by Haxe 4.1.5
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ds {
	public class Graph<T, U> {
		
		public Graph() {
			this.nodes = new global::haxe.ds.StringMap<object>();
			this.edges = new global::haxe.ds.StringMap<object>();
		}
		
		
		public global::haxe.ds.StringMap<object> nodes;
		
		public global::haxe.ds.StringMap<object> edges;
		
		public virtual global::dropecho.ds.GraphNode<T, U> createNode(T @value) {
			return this.addNode(new global::dropecho.ds.GraphNode<T, U>(new global::haxe.lang.Null<T>(@value, true), null));
		}
		
		
		public virtual global::dropecho.ds.GraphNode<T, U> addNode(global::dropecho.ds.GraphNode<T, U> node) {
			this.nodes.@set(node.id, node);
			node.graph = this;
			return node;
		}
		
		
		public virtual void addUniEdge(string nodeId, string otherId) {
			this.addUniEdge(nodeId, otherId, default(global::haxe.lang.Null<U>));
		}
		
		
		public virtual void addUniEdge(string nodeId, string otherId, global::haxe.lang.Null<U> data) {
			if (this.edges.exists(nodeId)) {
				((global::haxe.ds.StringMap<U>) (global::haxe.ds.StringMap<object>.__hx_cast<U>(((global::haxe.ds.StringMap) ((this.edges.@get(nodeId)).@value) ))) ).@set(otherId, (data).@value);
			}
			else {
				global::haxe.ds.StringMap<object> tmp = this.edges;
				global::haxe.ds.StringMap<U> _g = new global::haxe.ds.StringMap<U>();
				_g.@set(otherId, (data).@value);
				tmp.@set(nodeId, ((global::haxe.ds.StringMap<U>) (_g) ));
			}
			
		}
		
		
		public virtual void addBiEdge(string nodeId, string otherId) {
			this.addBiEdge(nodeId, otherId, default(global::haxe.lang.Null<U>));
		}
		
		
		public virtual void addBiEdge(string nodeId, string otherId, global::haxe.lang.Null<U> data) {
			this.addUniEdge(nodeId, otherId, data);
			this.addUniEdge(otherId, nodeId, data);
		}
		
		
		public virtual void @remove(string id) {
			this.edges.@remove(id);
			this.nodes.@remove(id);
		}
		
		
		public virtual global::haxe.root.Array<object> inNeighbors(global::dropecho.ds.GraphNode<T, U> node) {
			return this.inNeighbors(node, null);
		}
		
		
		public virtual global::haxe.root.Array<object> inNeighbors(global::dropecho.ds.GraphNode<T, U> node, global::haxe.lang.Function filter) {
			global::dropecho.ds.Graph<T, U> _gthis = this;
			global::haxe.root.Array<string> _this = this.inNeighborIds(node, filter);
			global::haxe.root.Array<object> ret = new global::haxe.root.Array<object>(((object[]) (new object[_this.length]) ));
			{
				int _g = 0;
				int _g1 = _this.length;
				while (( _g < _g1 )) {
					int i = _g++;
					{
						global::dropecho.ds.GraphNode<T, U> val = ((global::dropecho.ds.GraphNode<T, U>) ((_gthis.nodes.@get(((string) (_this.__a[i]) ))).@value) );
						ret.__a[i] = val;
					}
					
				}
				
			}
			
			return ret;
		}
		
		
		public virtual global::haxe.root.Array<string> inNeighborIds(global::dropecho.ds.GraphNode<T, U> node) {
			return this.inNeighborIds(node, null);
		}
		
		
		public virtual global::haxe.root.Array<string> inNeighborIds(global::dropecho.ds.GraphNode<T, U> node, global::haxe.lang.Function filter) {
			global::haxe.root.Array<string> _g = new global::haxe.root.Array<string>(new string[]{});
			{
				object _g1 = new global::haxe.iterators.MapKeyValueIterator<string, object>(((global::haxe.IMap<string, object>) (this.edges) ));
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(_g1, "hasNext", 407283053, null))) {
					object _g2 = ((object) (global::haxe.lang.Runtime.callField(_g1, "next", 1224901875, null)) );
					string id = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g2, "key", 5343647, true));
					global::haxe.ds.StringMap<U> edge = ((global::haxe.ds.StringMap<U>) (global::haxe.ds.StringMap<object>.__hx_cast<U>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g2, "value", 834174833, true)) ))) );
					if (( edge.exists(node.id) && (( ( filter == null ) || global::haxe.lang.Runtime.toBool(((global::haxe.lang.Function) (filter) ).__hx_invoke2_o(default(double), id, default(double), (edge.@get(node.id)).toDynamic())) )) )) {
						_g.push(id);
					}
					
				}
				
			}
			
			return _g;
		}
		
		
		public virtual global::haxe.root.Array<object> outNeighbors(global::dropecho.ds.GraphNode<T, U> node) {
			return this.outNeighbors(node, null);
		}
		
		
		public virtual global::haxe.root.Array<object> outNeighbors(global::dropecho.ds.GraphNode<T, U> node, global::haxe.lang.Function filter) {
			global::dropecho.ds.Graph<T, U> _gthis = this;
			global::haxe.root.Array<string> _this = this.outNeighborIds(node, filter);
			global::haxe.root.Array<object> ret = new global::haxe.root.Array<object>(((object[]) (new object[_this.length]) ));
			{
				int _g = 0;
				int _g1 = _this.length;
				while (( _g < _g1 )) {
					int i = _g++;
					{
						global::dropecho.ds.GraphNode<T, U> val = ((global::dropecho.ds.GraphNode<T, U>) ((_gthis.nodes.@get(((string) (_this.__a[i]) ))).@value) );
						ret.__a[i] = val;
					}
					
				}
				
			}
			
			return ret;
		}
		
		
		public virtual global::haxe.root.Array<string> outNeighborIds(global::dropecho.ds.GraphNode<T, U> node) {
			return this.outNeighborIds(node, null);
		}
		
		
		public virtual global::haxe.root.Array<string> outNeighborIds(global::dropecho.ds.GraphNode<T, U> node, global::haxe.lang.Function filter) {
			if ( ! (this.edges.exists(node.id)) ) {
				return new global::haxe.root.Array<string>(new string[]{});
			}
			
			global::haxe.root.Array<string> _g = new global::haxe.root.Array<string>(new string[]{});
			{
				object _g1 = new global::haxe.iterators.MapKeyValueIterator<string, U>(((global::haxe.ds.StringMap<U>) (global::haxe.ds.StringMap<object>.__hx_cast<U>(((global::haxe.ds.StringMap) ((this.edges.@get(node.id)).@value) ))) ));
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(_g1, "hasNext", 407283053, null))) {
					object _g2 = ((object) (global::haxe.lang.Runtime.callField(_g1, "next", 1224901875, null)) );
					string id = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g2, "key", 5343647, true));
					if (( ( filter == null ) || global::haxe.lang.Runtime.toBool(((global::haxe.lang.Function) (filter) ).__hx_invoke2_o(default(double), id, default(double), global::haxe.lang.Runtime.genericCast<U>(global::haxe.lang.Runtime.getField(_g2, "value", 834174833, true)))) )) {
						_g.push(id);
					}
					
				}
				
			}
			
			global::haxe.ds.ArraySort.sort<string>(((global::haxe.root.Array<string>) (_g) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::haxe.root.Reflect), "compare", 57219237)) ));
			return _g;
		}
		
		
		public virtual global::haxe.lang.Null<U> edgeData(string fromId, string toId) {
			if (this.edges.exists(fromId)) {
				return ((global::haxe.ds.StringMap<U>) (global::haxe.ds.StringMap<object>.__hx_cast<U>(((global::haxe.ds.StringMap) ((this.edges.@get(fromId)).@value) ))) ).@get(toId);
			}
			
			return default(global::haxe.lang.Null<U>);
		}
		
		
		public virtual string toString() {
			unchecked {
				string adjList = "\nGraph:\n";
				adjList = global::haxe.lang.Runtime.concat("\nGraph:\n", "out-Neighbors:\n");
				{
					object node = new global::haxe.ds._StringMap.StringMapValueIterator<object>(((global::haxe.ds.StringMap<object>) (this.nodes) ));
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(node, "hasNext", 407283053, null))) {
						global::dropecho.ds.GraphNode<T, U> node1 = ((global::dropecho.ds.GraphNode<T, U>) (global::haxe.lang.Runtime.callField(node, "next", 1224901875, null)) );
						adjList = global::haxe.lang.Runtime.concat(adjList, node1.id);
						adjList = global::haxe.lang.Runtime.concat(adjList, "\t-> ");
						global::haxe.root.Array<object> neighbors = this.outNeighbors(node1, null);
						{
							int _g = 0;
							while (( _g < neighbors.length )) {
								global::dropecho.ds.GraphNode<T, U> node2 = ((global::dropecho.ds.GraphNode<T, U>) (neighbors[_g]) );
								 ++ _g;
								adjList = global::haxe.lang.Runtime.concat(adjList, node2.id);
								if (( neighbors.indexOf(node2, default(global::haxe.lang.Null<int>)) != ( neighbors.length - 1 ) )) {
									adjList = global::haxe.lang.Runtime.concat(adjList, ",");
								}
								
							}
							
						}
						
						adjList = global::haxe.lang.Runtime.concat(adjList, "\n");
					}
					
				}
				
				adjList = global::haxe.lang.Runtime.concat(adjList, "in-Neighbors:\n");
				{
					object node3 = new global::haxe.ds._StringMap.StringMapValueIterator<object>(((global::haxe.ds.StringMap<object>) (this.nodes) ));
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(node3, "hasNext", 407283053, null))) {
						global::dropecho.ds.GraphNode<T, U> node4 = ((global::dropecho.ds.GraphNode<T, U>) (global::haxe.lang.Runtime.callField(node3, "next", 1224901875, null)) );
						adjList = global::haxe.lang.Runtime.concat(adjList, node4.id);
						adjList = global::haxe.lang.Runtime.concat(adjList, "\t-> ");
						global::haxe.root.Array<object> neighbors1 = this.inNeighbors(node4, null);
						{
							int _g1 = 0;
							while (( _g1 < neighbors1.length )) {
								global::dropecho.ds.GraphNode<T, U> node5 = ((global::dropecho.ds.GraphNode<T, U>) (neighbors1[_g1]) );
								 ++ _g1;
								adjList = global::haxe.lang.Runtime.concat(adjList, node5.id);
								if (( neighbors1.indexOf(node5, default(global::haxe.lang.Null<int>)) != ( neighbors1.length - 1 ) )) {
									adjList = global::haxe.lang.Runtime.concat(adjList, ",");
								}
								
							}
							
						}
						
						adjList = global::haxe.lang.Runtime.concat(adjList, "\n");
					}
					
				}
				
				return adjList;
			}
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


