// Generated by Haxe 4.1.5
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ds {
	public class Heap<T> {
		
		public Heap() : this(null) {}
		
		public Heap(global::haxe.lang.Function compare) {
			this.compare = ( (( compare != null )) ? (compare) : (new global::dropecho.ds.Heap_new_12__Fun<T>()) );
			this.elements = new global::haxe.root.Array<T>();
		}
		
		
		public global::haxe.lang.Function compare;
		
		public global::haxe.root.Array<T> elements;
		
		public virtual void push(T n) {
			unchecked {
				this.set_value(( this.elements.push(n) - 1 ), n);
			}
		}
		
		
		public virtual void set_value_obj(T oldVal, T newVal) {
			this.set_value(this.elements.indexOf(oldVal, default(global::haxe.lang.Null<int>)), newVal);
		}
		
		
		public virtual void set_value(int i, T val) {
			this.elements[i] = val;
			while (( ( i != 0 ) && global::haxe.lang.Runtime.toBool(this.compare.__hx_invoke2_o(default(double), val, default(double), this.elements[this._getParent(i)])) )) {
				this._swap(i, this._getParent(i));
				i = this._getParent(i);
			}
			
		}
		
		
		public virtual T pop() {
			unchecked {
				if (( this.elements.length == 0 )) {
					return default(T);
				}
				
				if (( this.elements.length == 1 )) {
					return (this.elements.shift()).@value;
				}
				
				global::haxe.lang.Null<T> element = this.elements.shift();
				this._heapify(0);
				return (element).@value;
			}
		}
		
		
		public virtual T peek() {
			return this.elements[0];
		}
		
		
		public virtual int size() {
			return this.elements.length;
		}
		
		
		public virtual void _heapify(int index) {
			global::haxe.root.Array<T> els = this.elements;
			int length = this.elements.length;
			int left = this._getLeft(index);
			int right = this._getRight(index);
			int top = index;
			if (( ( left < length ) && global::haxe.lang.Runtime.toBool(this.compare.__hx_invoke2_o(default(double), els[left], default(double), els[index])) )) {
				top = left;
			}
			
			if (( ( right < length ) && global::haxe.lang.Runtime.toBool(this.compare.__hx_invoke2_o(default(double), els[right], default(double), els[index])) )) {
				top = right;
			}
			
			if (( top != index )) {
				this._swap(index, top);
				this._heapify(top);
			}
			
		}
		
		
		public virtual void _swap(int a, int b) {
			T temp = this.elements[a];
			this.elements[a] = this.elements[b];
			this.elements[b] = temp;
		}
		
		
		public virtual int _getParent(int index) {
			unchecked {
				return ( (( index - 1 )) / 2 );
			}
		}
		
		
		public virtual int _getLeft(int index) {
			unchecked {
				return ( ( 2 * index ) + 1 );
			}
		}
		
		
		public virtual int _getRight(int index) {
			unchecked {
				return ( ( 2 * index ) + 2 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ds {
	public class Heap_new_12__Fun<T> : global::haxe.lang.Function {
		
		public Heap_new_12__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			T b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
			T a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return ( global::haxe.root.Reflect.compare<T>(global::haxe.lang.Runtime.genericCast<T>(a), global::haxe.lang.Runtime.genericCast<T>(b)) < 0 );
		}
		
		
	}
}


