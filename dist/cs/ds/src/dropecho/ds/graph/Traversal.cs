// Generated by Haxe 4.1.5
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ds.graph {
	public class Traversal {
		
		public Traversal() {
		}
		
		
		public static global::haxe.root.Array<string> breadthFirst<T, U>(global::dropecho.ds.GraphNode<T, U> node) {
			unchecked {
				global::haxe.root.Array<string> visited = new global::haxe.root.Array<string>();
				global::haxe.root.Array<object> toVisit = new global::haxe.root.Array<object>();
				toVisit.push(node);
				while (( toVisit.length > 0 )) {
					global::dropecho.ds.GraphNode<T, U> next = ((global::dropecho.ds.GraphNode<T, U>) ((toVisit.shift()).@value) );
					if (( visited.indexOf(next.id, default(global::haxe.lang.Null<int>)) == -1 )) {
						visited.push(next.id);
						{
							int _g = 0;
							global::haxe.root.Array<object> _g1 = next.neighbors(null);
							while (( _g < _g1.length )) {
								toVisit.push(((global::dropecho.ds.GraphNode<T, U>) (_g1[_g++]) ));
							}
							
						}
						
					}
					
				}
				
				return visited;
			}
		}
		
		
		public static global::haxe.root.Array<string> depthFirst<T, U>(global::dropecho.ds.GraphNode<T, U> node) {
			unchecked {
				global::haxe.root.Array<string> visited = new global::haxe.root.Array<string>();
				if (( visited.indexOf(node.id, default(global::haxe.lang.Null<int>)) == -1 )) {
					visited.push(node.id);
				}
				else {
					return null;
				}
				
				{
					int _g = 0;
					global::haxe.root.Array<object> _g1 = node.neighbors(null);
					while (( _g < _g1.length )) {
						global::dropecho.ds.graph.Traversal.depthFirst<T, U>(((global::dropecho.ds.GraphNode<T, U>) (_g1[_g++]) ));
					}
					
				}
				
				return visited;
			}
		}
		
		
	}
}


